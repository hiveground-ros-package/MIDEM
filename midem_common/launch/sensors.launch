<launch>
  <arg name="camera1" default="kinect_top"/>
  <arg name="camera2" default="kinect_front"/>
  <arg name="use_camera1" default="true"/>
  <arg name="use_camera2" default="false"/>  
   
  <!-- PCL pipeline -->
  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen"/>

  <group if="$(arg use_camera1)">
    <include file="$(find openni_launch)/launch/openni.launch">
      <arg name="camera" value="$(arg camera1)" />
      <arg name="device_id" value="A00363807157051A" />
      <arg name="depth_registration" value="true" />
      <arg name="publish_tf" value="false" />
    </include>

    <node name="$(arg camera1)_image" pkg="image_view" type="image_view" output="screen">
      <remap from="image" to="/$(arg camera1)/rgb/image_color" />
    </node>
    
    <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
    <node pkg="nodelet" type="nodelet" name="$(arg camera1)_voxel_grid" args="load pcl/VoxelGrid pcl_manager"
      output="screen">
      <remap from="~input" to="/$(arg camera1)/depth_registered/points" />
      <remap from="~output" to="/$(arg camera1)/voxel_grid_output" />
      <rosparam>
        filter_field_name: z  
        filter_limit_min: 0.0  
        filter_limit_max: 1.6  
        filter_limit_negative: False
        leaf_size: 0.01 
      </rosparam>
    </node>   

    <!-- Run a passthrough filter to remove unwanted points -->
    <node pkg="nodelet" type="nodelet" name="$(arg camera1)_passthrough_x" args="load pcl/PassThrough
      pcl_manager" output="screen">
      <remap from="~input" to="/$(arg camera1)/voxel_grid_output" />
      <remap from="~output" to="/$(arg camera1)/filtered_output" />
      <rosparam>
        filter_field_name: x  
        filter_limit_min: -0.65  
        filter_limit_max: 0.7  
        filter_limit_negative: False
      </rosparam>
    </node>
  </group>

  <group if="$(arg use_camera2)">
    <include file="$(find openni_launch)/launch/openni.launch">
      <arg name="camera" value="$(arg camera2)" />
      <arg name="device_id" value="A00366A10885046A" />
      <arg name="depth_registration" value="true" />
      <arg name="publish_tf" value="false" />
    </include>
    
    <node name="$(arg camera2)_image" pkg="image_view" type="image_view" output="screen">
      <remap from="image" to="/$(arg camera2)/rgb/image_color" />
    </node>
    
    <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
    <node pkg="nodelet" type="nodelet" name="$(arg camera2)_voxel_grid" args="load pcl/VoxelGrid pcl_manager"
      output="screen">
      <remap from="~input" to="/$(arg camera2)/depth_registered/points" />
      <remap from="~output" to="/$(arg camera2)/filtered_output" />
      <rosparam>
        filter_field_name: z  
        filter_limit_min: 0.0  
        filter_limit_max: 1.6  
        filter_limit_negative: False
        leaf_size: 0.01  
        output_frame: /base_link
      </rosparam>
    </node>
  </group>
</launch>

